{"version":3,"sources":["components/Card.js","components/Cards.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["React","memo","name","email","id","className","alt","src","cardsArray","robots","map","e","i","key","SearchBox","props","onChange","searchChange","type","placeholder","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","useState","counterButtonState","setCounterButtonState","color","onClick","previousState","Header","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChangeHandler","event","payload","target","value","onRequestRobotsHandler","fetch","then","response","json","data","catch","useEffect","robotsFiltered","filter","robot","toLocaleLowerCase","includes","console","log","Boolean","window","location","hostname","match","initialStateSearch","initialStateRequest","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.309d6e3a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <h1>RoboFriends</h1>\r\n            <img alt='robot' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Card);","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cards = ({ robots }) => {\r\n    const cardsArray = robots.map((e, i) =>\r\n        <Card key={i} id={e.id} name={e.name} email={e.email} />);\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Cards);","import React from 'react';\r\n\r\nconst SearchBox = React.memo(\r\n    function SearchBox(props) {\r\n        return (\r\n            <div className='pa2'>\r\n                <input\r\n                    onChange={props.searchChange}\r\n                    className='pa3 ba b--green bg-lightest-blue'\r\n                    type='search'\r\n                    placeholder='search robots' />\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError)\r\n            return <h1>Ooooops. That is not good</h1>\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { useState } from 'react';\r\n\r\nconst CounterButton = (props) => {\r\n        const [counterButtonState, setCounterButtonState] = useState(0);\r\n\r\n        const updateCount = () => {\r\n            setCounterButtonState(previousState => previousState + 1);\r\n        }\r\n\r\n        return (\r\n            <button color={props.color} onClick={updateCount} >\r\n                Count: {counterButtonState}\r\n            </button>\r\n        )\r\n    }\r\n\r\n\r\nexport default React.memo(CounterButton);","import React from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nconst Header = React.memo(\r\n    function Header() {\r\n        return (\r\n            <div>\r\n                <h1 className='f2'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\nexport default Header;","import React, { useEffect } from 'react';\r\nimport Cards from '../components/Cards';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../components/Header';\r\n\r\nimport './App.css';\r\n\r\nconst App = props => {\r\n    const {\r\n        robots,\r\n        searchField,\r\n        isPending,\r\n        onRequestRobotsHandler,\r\n        onSearchChangeHandler } = props;\r\n\r\n    useEffect(() => onRequestRobotsHandler(), [onRequestRobotsHandler]);\r\n\r\n    const robotsFiltered = robots.filter(robot =>\r\n        robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase()));\r\n\r\n    console.log('app')\r\n    return isPending\r\n        ? <h1>Loading...</h1>\r\n        : (\r\n            <div className='tc'>\r\n                <Header />\r\n                <SearchBox searchChange={(e) => onSearchChangeHandler(e)} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <Cards robots={robotsFiltered} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChangeHandler: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobotsHandler: () => requestRobots(dispatch)\r\n        //      onRequestRobotsHandler: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text })\r\n\r\nexport const requestRobots = (dispatch) => {\r\n  //export const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n} ","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n\r\n}\r\nconst initialStateRequest = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRequest, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false });\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n/* import {createLogger} from 'redux-logger'; */\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\n/* const logger = createLogger(); */\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware/* , logger */));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); \n"],"sourceRoot":""}